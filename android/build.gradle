def signingProperties = new Properties()
signingProperties.load(new FileInputStream(file('signing.properties')))

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.cyphercove.doublehelix"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 9
        versionName "1.0.5"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }

        free {
            res.srcDirs = ['res-free']
        }

        amazon {
            res.srcDirs = ['res-amazon']
        }
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }

    flavorDimensions 'storefront', 'content'

    productFlavors {

        googleplay {
            dimension "storefront"
            buildConfigField "String", "STOREFRONT", '"googleplay"'
            buildConfigField "String", "APP_STORE_LINK_PREFIX", '"http://play.google.com/store/apps/details?id="'
            buildConfigField "String", "BACKUP_APP_STORE_LINK_PREFIX", '""'
            buildConfigField "String", "COMPANY_STORE_LINK", '"http://play.google.com/store/apps/dev?id=9185389251891875863"'
            buildConfigField "String", "BACKUP_COMPANY_STORE_LINK", '""'
            buildConfigField "String", "PREMIUM_APPLICATION_ID", '"com.cyphercove.doublehelix"'
        }

        amazon {
            dimension "storefront"
            buildConfigField "String", "STOREFRONT", '"amazon"'
            buildConfigField "String", "APP_STORE_LINK_PREFIX", '"amzn://apps/android?p="'
            buildConfigField "String", "BACKUP_APP_STORE_LINK_PREFIX", '"http://www.amazon.com/gp/mas/dl/android?p="'
            buildConfigField "String", "COMPANY_STORE_LINK", '"amzn://apps/android?p=com.cyphercove.doublehelix&showAll=1"'
            buildConfigField "String", "BACKUP_COMPANY_STORE_LINK", '"http://www.amazon.com/gp/mas/dl/android?p=com.cyphercove.doublehelix&showAll=1"'
            buildConfigField "String", "PREMIUM_APPLICATION_ID", '"com.cyphercove.doublehelix"'
        }

        free {
            dimension "content"
            applicationId "com.cyphercove.doublehelixfree"
            buildConfigField "boolean", "PREMIUM", "false"
        }

        premium {
            dimension "content"
            applicationId "com.cyphercove.doublehelix"
            buildConfigField "boolean", "PREMIUM", "true"
        }

    }

    signingConfigs {
        release {
            storeFile file(signingProperties['storeFile'])
            storePassword signingProperties['storePassword']
            keyAlias signingProperties['keyAlias']
            keyPassword signingProperties['keyPassword']
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            debuggable true
            zipAlignEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.cyphercove.audioglow.android/com.cyphercove.doublehelix.InfoActivity'
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}